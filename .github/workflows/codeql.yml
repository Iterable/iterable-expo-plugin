name: "CodeQL Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'javascript') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: javascript-typescript
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          queries: ${{ matrix.language && 'security-extended, security-and-quality' }}


      # If the analyze step fails for one of the languages you are analyzing with
      # "We were unable to automatically build your code", modify the matrix above
      # to set the build mode to "manual" for that language. Then modify this step
      # to build your code.
      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"


  analyze2:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add any setup steps before running the `github/codeql-action/init` action.
      # This includes steps like installing compilers or runtimes (`actions/setup-node`
      # or others). This is typically only required for manual builds.
      # - name: Setup runtime (example)
      #   uses: actions/setup-example@v1

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          queries: ${{ matrix.language && 'security-extended, security-and-quality' }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  analyze3:
    name: Analyze (${{ matrix.language }})
    timeout-minutes: 120
    env:
      TURBO_CACHE_DIR: .turbo/ios
      TURBO_TOKEN: ${{ secrets. TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets. TURBO_TEAM }}

    runs-on: ${{ (matrix.language == 'swift' && 'macos-15') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: swift
            build-mode: manual

    build_library:
      runs-on: ubuntu-latest
      steps:

        - name: Checkout
          uses: actions/checkout@v4

        - name: Setup
          uses: ./.github/actions/setup

        - name: Build package
          run: yarn prepare

          #      - name: Clean DerivedData folder
          #        run: |
          #          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          #
          #      - name: Setup
          #        uses: ./.github/actions/setup
          #
          #      - name: Cache cocoapods
          #        if: env.turbo_cache_hit != 1
          #        id: cocoapods-cache
          #        uses: actions/cache@v4
          #        with:
          #          path: |
          #            **/ios/Pods
          #          key: ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile.lock') }}
          #          restore-keys: |
          #            ${{ runner.os }}-cocoapods-
          #
          #      - name: Install cocoapods
          #        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
          #        run: |
          #          cd example/ios &&
          #          NO_FLIPPER=1 pod install --repo-update &&
          #          cd ..
          #        env:
          #          NO_FLIPPER: 1

          # Initializes the CodeQL tools for scanning.
        - name: Initialize CodeQL
          uses: github/codeql-action/init@v3
          with:
            languages: ${{ matrix.language }}
            build-mode: ${{ matrix.build-mode }}
            # If you wish to specify custom queries, you can do so here or in a config file.
            # By default, queries listed here will override any specified in a config file.
            # Prefix the list here with "+" to use these queries and those in the config file.

            # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
            queries: ${{ matrix.language && 'security-extended, security-and-quality' }}

        - if: matrix.build-mode == 'manual'
          shell: bash
          run: |
            cd example/ios
            
            xcodebuild clean build \
            -workspace IterableExpoPlugin.xcworkspace \
            -scheme IterableExpoPluginExample \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            BUILD_LIBRARY_FOR_DISTRIBUTION=NO \
            APPLICATION_EXTENSION_API_ONLY=NO

          #        yarn add -D @iterable-expo-plugin/cli
          continue-on-error: true

        - name: Perform CodeQL Analysis
          uses: github/codeql-action/analyze@v3
          with:
            category: "/language:${{matrix.language}}"
